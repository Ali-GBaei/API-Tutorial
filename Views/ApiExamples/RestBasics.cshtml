@{
    ViewData["Title"] = "REST API Basics";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>
    
    <div class="alert alert-info">
        <strong>REST (Representational State Transfer)</strong> is an architectural style for designing networked applications.
        It uses HTTP methods to perform CRUD (Create, Read, Update, Delete) operations.
    </div>

    <h2>HTTP Methods</h2>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Method</th>
                <th>Purpose</th>
                <th>Example</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><span class="badge bg-primary">GET</span></td>
                <td>Retrieve data from server</td>
                <td>Get list of users, Get user by ID</td>
            </tr>
            <tr>
                <td><span class="badge bg-success">POST</span></td>
                <td>Create new resource</td>
                <td>Create a new user</td>
            </tr>
            <tr>
                <td><span class="badge bg-warning">PUT</span></td>
                <td>Update existing resource</td>
                <td>Update user information</td>
            </tr>
            <tr>
                <td><span class="badge bg-danger">DELETE</span></td>
                <td>Delete a resource</td>
                <td>Delete a user</td>
            </tr>
        </tbody>
    </table>

    <h2>Code Example: Making a GET Request</h2>
    
    <h4>Using C# HttpClient</h4>
    <pre class="bg-light p-3 rounded"><code>using System.Net.Http;
using System.Text.Json;

public class RestApiExample
{
    private readonly HttpClient _httpClient;

    public RestApiExample()
    {
        _httpClient = new HttpClient();
    }

    public async Task&lt;string&gt; GetUserAsync(int userId)
    {
        try
        {
            // Make GET request
            var response = await _httpClient.GetAsync(
                $"https://jsonplaceholder.typicode.com/users/{userId}");
            
            // Ensure success status code
            response.EnsureSuccessStatusCode();
            
            // Read response content
            var content = await response.Content.ReadAsStringAsync();
            
            return content;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }
}</code></pre>

    <h4>Using C# with JSON Deserialization</h4>
    <pre class="bg-light p-3 rounded"><code>public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
}

public async Task&lt;User&gt; GetUserObjectAsync(int userId)
{
    var response = await _httpClient.GetAsync(
        $"https://jsonplaceholder.typicode.com/users/{userId}");
    
    response.EnsureSuccessStatusCode();
    
    var content = await response.Content.ReadAsStringAsync();
    var user = JsonSerializer.Deserialize&lt;User&gt;(content);
    
    return user;
}</code></pre>

    <h2>Code Example: Making a POST Request</h2>
    <pre class="bg-light p-3 rounded"><code>using System.Net.Http.Json;

public async Task&lt;User&gt; CreateUserAsync(User newUser)
{
    try
    {
        // POST request with JSON body
        var response = await _httpClient.PostAsJsonAsync(
            "https://jsonplaceholder.typicode.com/users", 
            newUser);
        
        response.EnsureSuccessStatusCode();
        
        // Deserialize response
        var createdUser = await response.Content.ReadFromJsonAsync&lt;User&gt;();
        
        return createdUser;
    }
    catch (HttpRequestException ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
        return null;
    }
}</code></pre>

    <h2>HTTP Status Codes</h2>
    <div class="row">
        <div class="col-md-6">
            <h5>Success Codes (2xx)</h5>
            <ul>
                <li><strong>200 OK</strong> - Request succeeded</li>
                <li><strong>201 Created</strong> - Resource created successfully</li>
                <li><strong>204 No Content</strong> - Success, no content to return</li>
            </ul>
        </div>
        <div class="col-md-6">
            <h5>Error Codes (4xx, 5xx)</h5>
            <ul>
                <li><strong>400 Bad Request</strong> - Invalid request</li>
                <li><strong>401 Unauthorized</strong> - Authentication required</li>
                <li><strong>404 Not Found</strong> - Resource not found</li>
                <li><strong>500 Internal Server Error</strong> - Server error</li>
            </ul>
        </div>
    </div>

    <div class="mt-4">
        <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Back to Home</a>
        <a asp-controller="ApiExamples" asp-action="Authentication" class="btn btn-primary">Next: Authentication</a>
    </div>
</div>
